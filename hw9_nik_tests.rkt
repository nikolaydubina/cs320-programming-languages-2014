(test (eval (eq (num 13)
                  (ifthenelse (eq (num 1) (add (num -1) (num 2)))
                              (num 12)
                              (num 13))))
      (boolV false))

(test (typecheck (eq (num 13)
                     (ifthenelse (eq (num 1) (add (num -1) (num 2)))
                                 (num 12)
                                 (num 13)))
                 (mtEnv))
      (boolT))
(test/exn (typecheck (add (num 1)
                          (ifthenelse (bool true)
                                      (bool true)
                                      (bool false)))
                     (mtEnv))
          "no type")

;; my
(test/exn   (eval   (app (fun (list 'x 'y) (list (boolTE) (numTE))
                      (eq (id 'x) (id 'y)))
                    (list (bool false) (num 3))))
        "type-error: typecheck")
(test/exn   (eval   (app (fun (list 'x 'y) (list (boolTE) (boolTE))
                      (eq (id 'x) (id 'y)))
                    (list (bool false) (bool true))))
        "type-error: typecheck")
(test   (eval   (app (fun (list 'x 'y) (list (numTE) (numTE))
                      (eq (id 'x) (id 'y)))
                (list (num 4) (num 3))))
        (boolV false))
(test   (eval   (app (fun (list 'x 'y) (list (boolTE) (boolTE))
                      (ifthenelse (id 'x) (num 1) (num 2)))
                (list (bool false) (bool true))))
        (numV 2))
(test   (eval   (app (fun (list 'x 'y) (list (boolTE) (boolTE))
                      (ifthenelse (id 'y) (num 1) (num 2)))
                (list (bool false) (bool true))))
        (numV 1))
(test   (eval   (app (fun (list 'x 'y) (list (numTE) (numTE))
                      (eq (id 'x) (id 'y)))
                (list (num 3) (num 3))))
        (boolV true))
(test   (eval   (app (fun (list 'x 'y) (list (numTE) (numTE))
                      (eq (id 'x) (id 'y)))
                (list (num 3) (add (num 1) (num 2)))))
        (boolV true))
(test   (eval   (ifthenelse (bool false) (num 3) (num 4)))
        (numV 4))
(test   (eval   (ifthenelse (bool true) (num 3) (num 4)))
        (numV 3))
(test/exn   (eval   (ifthenelse (num 3) (num 4) (num 5)))
        "type-error: typecheck")
(test/exn   (eval   (ifthenelse (bool false) (bool false) (num 5)))
        "type-error: typecheck")


(test (eval (app (fun (list 'x 'y) (list (crossTE (boolTE) (numTE)) (numTE))
                      (fst (id 'x)))
                 (list (pair (bool false) (num 3)) (num 2))))
      (boolV false))

(test/exn (eval (app (fun (list 'x 'y) (list (crossTE (boolTE) (numTE)) (numTE))
                      (fst (id 'x)))
                 (list (pair (num 5) (num 3)) (num 2))))
      "type-error: typecheck")

;; my
(test (run (app 
        (fun (list 'x 'y) (list (numTE) (numTE)) 
            (with (list 'x 'y) 
                  (list (numTE) (arrowTE (list (numTE)) (numTE))) 
                  (list 
                    (num 3)
                    (fun (list 'x) (list (boolTE)) 
                         (ifthenelse (eq (id 'x) (num 3))
                                (num 12)
                                (num 6)
                         )
                    )
                  )
                  (app (id 'y) (list (id 'x)))
        ))
        (list (num 5) (add (num 2) (num 3))))) (numV 6))

(test/exn (eval (app 
        (fun (list 'x 'y 'z) (list (numTE) (numTE) (boolTE)) 
            (with (list 'x 'y) 
                  (list (numTE) (arrowTE (list (numTE)) (numTE))) 
                  (list 
                    (num 3)
                    (fun (list 'x) (list (boolTE)) 
                         (ifthenelse (eq (id 'z) (num 3))
                                (num 12)
                                (num 6)
                         )
                    )
                  )
                  (app (id 'y) (list (id 'x)))
        ))
        (list (num 5) (num 1) (bool false)))) "type-error: typecheck")

;; try1 - throw
(test   (eval   (try1   (app  (fun (list 'x) (list (numTE))
                                (add (num 32)
                                     (try1  (throw)
                                            (id 'x))
                                ))
                            (list (num 10)))
                        (num 5))
                )
        (numV 42))

(test   (eval   (try1   (add (num 32) (throw))
                        (num 5)))
        (numV 5))

(test   (eval   (try1   (app  (fun (list 'x) (list (numTE))
                                (add (num 32)
                                     (try1  (throw)
                                            (throw))
                                ))
                            (list (num 10)))
                        (num 5))
                )
        (numV 5))

(test   (eval   (app (fun (list 'x) (list (arrowTE (list (numTE)) (numTE)))
                        (app (id 'x) (list (num 10))))
                     (list (fun (list 'x) (list (numTE))
                                (add (id 'x) (num 10)))
                     )
        ))
        (numV 20))

(test   (eval   (try1 (app (fun (list 'x) (list (arrowTE (list (numTE)) (numTE)))
                            (app (id 'x) (list (throw))))
                         (list (fun (list 'x) (list (numTE))
                                    (add (id 'x) (num 10)))
                         ))
                      (num 42)
        ))
        (numV 42))

(test   (eval   (try1 (app (fun (list 'x) (list (arrowTE (list (numTE)) (numTE)))
                            (app (id 'x) (list (num 11))))
                         (list (fun (list 'x) (list (numTE))
                                    (add (id 'x) (throw)))
                         ))
                      (num 42)
        ))
        (numV 42))


;; additional
(test/exn (eval (ifthenelse (bool true) (num 3) (bool false))) "type-error: typecheck")
(test/exn (eval (app (fun (list 'x) (list (numTE)) (id 'x)) (list (bool false)))) "type-error: typecheck")
(test/exn (eval (app (fun (list 'x 'y) (list (numTE) (boolTE)) (num 23))
                     (list (bool false) (num 3)))) "type-error: typecheck")
(test/exn (eval (app (fun (list 'x 'y) (list (numTE) (boolTE)) (num 23))
                     (list (bool false)))) "type-error: typecheck")
(test/exn (eval (app (fun (list 'x) (list (numTE)) (num 23))
                     (list (bool false) (num 3)))) "type-error: typecheck")



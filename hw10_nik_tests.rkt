(test (eval (add (num 10) (num 17))) (numV 27))
(test (eval (sub (num 10) (num 7))) (numV 3))
(test (eval (app (fun (list 'x) (list (numTE)) (add (id 'x) (num 12))) (list (add (num 1) (num 17))))) (numV 30))

(test   (eval (app (fun (list 'x) (list (numTE))
                        (app (fun (list 'f) (list (arrowTE (list (numTE)) (numTE)))
                                  (add (app (id 'f) (list (num 1)))
                                       (app (fun (list 'x) (list (numTE))
                                                 (app (id 'f)
                                                      (list (num 2))))
                                            (list (num 3)))))
                             (list (fun (list 'y) (list (numTE))
                                  (add (id 'x) (id 'y))))))
                   (list (num 0)))
        )
        (numV 3))

(test (typecheck (num 10) (mtEnv)) (numT))
(test (typecheck (add (num 10) (num 17)) (mtEnv)) (numT))
(test (typecheck (sub (num 10) (num 7)) (mtEnv)) (numT))
(test (typecheck (fun (list 'x) (list (numTE)) (add (id 'x) (num 12))) (mtEnv)) (arrowT (list (numT)) (numT)))
(test (typecheck (app (fun (list 'x) (list (numTE)) (add (id 'x) (num 12))) (list (add (num 1) (num 17)))) (mtEnv)) (numT))

(test/exn (typecheck (app (num 1) (list (num 2))) (mtEnv)) "app: wrong args app")
(test/exn (typecheck (add (fun (list 'x) (list (numTE)) (num 12)) (num 2)) (mtEnv)) "no type")

(test (run (app (fun (list) (list) (num 10)) (list))) (numV 10))
(test (run (app 
              (fun (list 'x 'y) (list (numTE) (numTE))
                (sub (id 'x) (id 'y)))
              (list (num 10) (num 20))))
      (numV -10))

(test (eval (if0  (sub (num 4) (num 4))
                  (num 42)
                  (num 10)
      )) (numV 42))

(test (eval (if0  (sub (num 4) (num 3))
                  (num 42)
                  (num 10)
      )) (numV 10))

(test (eval
        (rec 'x (arrowTE (list (numTE)) (numTE))
          (fun (list 'y) (list (numTE))
            (if0 (sub (id 'y) (num 1))
              (id 'y)
              (add (num 2) (app (id 'x) (list (sub (id 'y) (num 1)))))
            ))
          (app (id 'x) (list (num 10)))
        ))
      (numV 19))

(test (eval
        (app (fun (list 'z) (list (numTE))
            (rec 'x (arrowTE (list (numTE)) (numTE))
              (fun (list 'y) (list (numTE))
                (if0 (sub (id 'y) (num 1))
                  (id 'y)
                  (add (id 'z) (app (id 'x) (list (sub (id 'y) (num 1)))))
                ))
              (app (id 'x) (list (num 10)))
            ))
            (list (num 10)))
      )
      (numV 91))

(test (eval (bool false)) (boolV false))

(test   (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (app (id 'v1) (list (num 42)))
            )
        )
        (variantV #f (numV 42))
)
(test   (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (app (id 'v2) (list (bool false)))
            )
        )
        (variantV #t (boolV false))
)
(test/exn (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (app (id 'v2) (list (num 3)))
            )
        )
        "app: bad arguments` types"
)

(test   (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (cases 't1 (app (id 'v1) (list (num 2)))
                    'v1 'x (add (id 'x) (num 1))
                    'v2 'y (num 2)
                )
            )
        )
        (numV 3)
)
(test   (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (cases 't1 (app (id 'v2) (list (bool false)))
                    'v1 'x (add (id 'x) (num 1))
                    'v2 'y (num 2)
                )
            )
        )
        (numV 2)
)

(test   (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (app
                  (fun (list 'x) (list (idTE 't1)) (num 10))
                  (list (app (id 'v1) (list (num 5))))
                )
            )
        )
        (numV 10)
)
(test   (eval
            (with-type 't1 'v1 (numTE)
                           'v2 (boolTE)
                (with-type 'q1 'z1 (boolTE)
                               'z2 (numTE)
                    (app (id 'v1) (list (num 42)))
                )
            )
        )
        (variantV #f (numV 42))